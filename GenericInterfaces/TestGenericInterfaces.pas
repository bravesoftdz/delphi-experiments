unit TestGenericInterfaces;

{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}


interface

uses
  TestFramework;

type
  ISubscriber<T> = interface
    procedure Receive(Event : T);
  end;

  TSomeEvent = class
  private
    FDetails: String;
  public
    property Details : String read FDetails write FDetails;
    // other stuff
  end;

  TSomeOtherEvent = class
  private
    FDetails: String;
  public
    property Details : String read FDetails write FDetails;
    // other stuff
  end;

  TMySubscribingObject = class(TInterfacedObject, ISubscriber<TSomeEvent>, ISubscriber<TSomeOtherEvent>)
  protected
    procedure Receive(Event : TSomeEvent); overload;
    procedure Receive(Event : TSomeOtherEvent); overload;
  end;

  // Test methods for class TMySubscribingObject

  TestTMySubscribingObject = class(TTestCase)
  strict private
    SomeEventSubscriber : ISubscriber<TSomeEvent>;
    SomeOtherEventSubscriber : ISubscriber<TSomeOtherEvent>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestReceiveSomeEvent;
    procedure TestReceiveSomeOtherEvent;
  end;


implementation
uses
  SysUtils;

type
  EWrongMessageReceivedException = class(Exception);

const
  mdSomeEvent = 'Some Event';
  mdSomeOtherEvent = 'Some Other Event';

procedure TestTMySubscribingObject.SetUp;
var
  tmpSubscriber : TMySubscribingObject;
begin
  tmpSubscriber := TMySubscribingObject.Create;
  SomeEventSubscriber := tmpSubscriber;
  SomeOtherEventSubscriber := tmpSubscriber;
end;

procedure TestTMySubscribingObject.TearDown;
begin
  SomeEventSubscriber := nil;
  SomeOtherEventSubscriber := nil;
end;

procedure TestTMySubscribingObject.TestReceiveSomeEvent;
var
  SomeEvent : TSomeEvent;
begin
  SomeEvent := TSomeEvent.Create;
  try
    SomeEvent.Details := mdSomeEvent;
    SomeEventSubscriber.Receive(SomeEvent);
    Check(True);  // if receive throws an exception, we won't get here
  finally
    SomeEvent.Free;
  end;
end;

procedure TestTMySubscribingObject.TestReceiveSomeOtherEvent;
var
  SomeOtherEvent : TSomeOtherEvent;
begin
  SomeOtherEvent := TSomeOtherEvent.Create;
  try
    SomeOtherEvent.Details := mdSomeOtherEvent;
    SomeOtherEventSubscriber.Receive(SomeOtherEvent);
    Check(True);  // if receive throws an exception, we won't get here
  finally
    SomeOtherEvent.Free;
  end;
end;

{ TMySubscribingObject }

procedure TMySubscribingObject.Receive(Event: TSomeEvent);
begin
  if Event.Details <> mdSomeEvent then
    raise EWrongMessageReceivedException.Create(Format('Expected ''%s'', received ''%s''', [mdSomeEvent, Event.Details]));
end;

procedure TMySubscribingObject.Receive(Event: TSomeOtherEvent);
begin
  if Event.Details <> mdSomeOtherEvent then
    raise EWrongMessageReceivedException.Create(Format('Expected ''%s'', received ''%s''', [mdSomeOtherEvent, Event.Details]));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMySubscribingObject.Suite);

end.
