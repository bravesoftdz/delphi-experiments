unit TestReportFactory;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Generics.Collections, Generics.Factory;


type
  TBaseReport = class
    procedure Execute; virtual; abstract;
  end;

  TReportOne = class(TBaseReport)
  public
    procedure Execute; override;
  end;

  TReportTwo = class(TBaseReport)
  public
    procedure Execute; override;
  end;

  TReportFlexible = class(TBaseReport)
  protected
    FReportDetail : string;
  public
    property ReportDetail : string read FReportDetail write FReportDetail;
    procedure Execute; override;
    constructor Create(const ReportDetail : string);
  end;


  // Test methods for class TFactory

  TestTFactory = class(TTestCase)
  strict private
    ReportFactory: TFactory<String, TBaseReport>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsRegistered;
    procedure TestRegisterSingleFactoryMethod;
    procedure TestRegisterWhenAlreadyRegistered;
    procedure TestUnRegister;
    procedure TestUnregisterWhenNotAlreadyRegistered;
    procedure TestRegisterMultipleFactoryMethods;
    procedure TestGetInstance;
    procedure TestGetInstanceWhenNotRegistered;
  end;

implementation
uses
  SysUtils;

type
  // I'm committing a horrid sin here I know. I'm using an exception
  // as a communications mechanism between my report and my testcase.
  // However, I sleep at night by telling myself it's a) convenient and
  // b) not actually part of the Factory or a real app, just my test code.
  TReportExecutionException = class(Exception);

const
  rnReportOne = 'Report One';
  rnReportTwo = 'Report Two';
  rnReportMalcolm = 'Malcolm''s Report';
  rnReportFrank = 'Frank''s Report';

procedure TestTFactory.SetUp;
begin
  ReportFactory := TFactory<String, TBaseReport>.Create;
end;

procedure TestTFactory.TearDown;
begin
  ReportFactory.Free;
  ReportFactory := nil;
end;

procedure TestTFactory.TestGetInstance;
var
  Report : TBaseReport;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                              begin
                                                Result := TReportOne.Create;
                                              end);

  ReportFactory.RegisterFactoryMethod(rnReportTwo, function : TBaseReport
                                              begin
                                                Result := TReportTwo.Create;
                                              end);

  ReportFactory.RegisterFactoryMethod(rnReportMalcolm, function : TBaseReport
                                                  begin
                                                    Result := TReportFlexible.Create(rnReportMalcolm);
                                                  end);

  ReportFactory.RegisterFactoryMethod(rnReportFrank, function : TBaseReport
                                                begin
                                                  Result := TReportFlexible.Create(rnReportFrank);
                                                end);

  Report := ReportFactory.GetInstance(rnReportMalcolm);
  try
    try
      Report.Execute;
    except
      on E : TReportExecutionException do
      begin
        if E.Message <> rnReportMalcolm then
          raise E;
      end;
    end;
  finally
    Report.Free;
  end;
end;

procedure TestTFactory.TestGetInstanceWhenNotRegistered;
begin
  try
    ReportFactory.GetInstance(rnReportMalcolm).Execute;
  except
    on E : TFactoryMethodKeyNotRegisteredException do
    begin
      // expected Exception
    end;
  end;
end;

procedure TestTFactory.TestIsRegistered;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                               begin
                                                 Result := TReportOne.Create;
                                               end);
  CheckTrue(ReportFactory.IsRegistered(rnReportOne));
end;

procedure TestTFactory.TestRegisterMultipleFactoryMethods;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                              begin
                                                Result := TReportOne.Create;
                                              end);

  ReportFactory.RegisterFactoryMethod(rnReportTwo, function : TBaseReport
                                              begin
                                                Result := TReportTwo.Create;
                                              end);

  ReportFactory.RegisterFactoryMethod(rnReportMalcolm, function : TBaseReport
                                                  begin
                                                    Result := TReportFlexible.Create('Malcolm''s Report');
                                                  end);

  ReportFactory.RegisterFactoryMethod(rnReportFrank, function : TBaseReport
                                                begin
                                                  Result := TReportFlexible.Create('Frank''s Report');
                                                end);

  CheckEquals(4, ReportFactory.Count);
  CheckTrue(ReportFactory.IsRegistered(rnReportOne));
  CheckTrue(ReportFactory.IsRegistered(rnReportTwo));
  CheckTrue(ReportFactory.IsRegistered(rnReportMalcolm));
  CheckTrue(ReportFactory.IsRegistered(rnReportFrank));
end;

procedure TestTFactory.TestRegisterSingleFactoryMethod;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                               begin
                                                 Result := TReportOne.Create;
                                               end);
  CheckEquals(1, ReportFactory.Count);
end;

procedure TestTFactory.TestRegisterWhenAlreadyRegistered;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                               begin
                                                 Result := TReportOne.Create;
                                               end);

  try
    ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                                 begin
                                                   Result := TReportOne.Create;
                                                 end);
  except
    on E : TFactoryMethodKeyAlreadyRegisteredException do
    begin
      // expected exception caught
    end;
  end;
end;

procedure TestTFactory.TestUnregister;
begin
  ReportFactory.RegisterFactoryMethod(rnReportOne, function : TBaseReport
                                               begin
                                                 Result := TReportOne.Create;
                                               end);
  ReportFactory.UnregisterFactoryMethod(rnReportOne);
  CheckFalse(ReportFactory.IsRegistered(rnReportOne));
end;

procedure TestTFactory.TestUnregisterWhenNotAlreadyRegistered;
begin
  try
    ReportFactory.UnregisterFactoryMethod(rnReportOne);
  except
    on E : TFactoryMethodKeyNotRegisteredException do
    begin
      // expected exception caught
    end;
  end;
end;

{ TReportOne }

procedure TReportOne.Execute;
begin
  raise TReportExecutionException.Create(rnReportOne);
end;

{ TReportFlexible }

constructor TReportFlexible.Create(const ReportDetail: string);
begin
  inherited Create;
  self.ReportDetail := ReportDetail;
end;

procedure TReportFlexible.Execute;
begin
  raise TReportExecutionException.Create(ReportDetail);
end;

{ TReportTwo }

procedure TReportTwo.Execute;
begin
  raise TReportExecutionException.Create(rnReportTwo);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFactory.Suite);
end.

